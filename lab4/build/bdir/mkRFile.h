/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Tue May  2 15:54:47 KST 2017
 * 
 */

/* Generation options: */
#ifndef __mkRFile_h__
#define __mkRFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRFile module */
class MOD_mkRFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_bypassE_data_0_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassE_data_0_dummy2_1;
  MOD_Wire<tUInt64> INST_bypassE_data_0_dummy_0_0;
  MOD_Wire<tUInt64> INST_bypassE_data_0_dummy_0_1;
  MOD_Wire<tUInt64> INST_bypassE_data_0_dummy_1_0;
  MOD_Wire<tUInt64> INST_bypassE_data_0_dummy_1_1;
  MOD_Wire<tUInt64> INST_bypassE_data_0_lat_0;
  MOD_Wire<tUInt64> INST_bypassE_data_0_lat_1;
  MOD_Reg<tUInt64> INST_bypassE_data_0_rl;
  MOD_Reg<tUInt8> INST_bypassE_deqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassE_deqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bypassE_deqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bypassE_deqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bypassE_deqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bypassE_deqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bypassE_deqP_lat_0;
  MOD_Wire<tUInt8> INST_bypassE_deqP_lat_1;
  MOD_Reg<tUInt8> INST_bypassE_deqP_rl;
  MOD_Reg<tUInt8> INST_bypassE_enqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassE_enqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bypassE_enqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bypassE_enqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bypassE_enqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bypassE_enqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bypassE_enqP_lat_0;
  MOD_Wire<tUInt8> INST_bypassE_enqP_lat_1;
  MOD_Reg<tUInt8> INST_bypassE_enqP_rl;
  MOD_Reg<tUInt8> INST_bypassM_data_0_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassM_data_0_dummy2_1;
  MOD_Wire<tUInt64> INST_bypassM_data_0_dummy_0_0;
  MOD_Wire<tUInt64> INST_bypassM_data_0_dummy_0_1;
  MOD_Wire<tUInt64> INST_bypassM_data_0_dummy_1_0;
  MOD_Wire<tUInt64> INST_bypassM_data_0_dummy_1_1;
  MOD_Wire<tUInt64> INST_bypassM_data_0_lat_0;
  MOD_Wire<tUInt64> INST_bypassM_data_0_lat_1;
  MOD_Reg<tUInt64> INST_bypassM_data_0_rl;
  MOD_Reg<tUInt8> INST_bypassM_deqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassM_deqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bypassM_deqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bypassM_deqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bypassM_deqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bypassM_deqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bypassM_deqP_lat_0;
  MOD_Wire<tUInt8> INST_bypassM_deqP_lat_1;
  MOD_Reg<tUInt8> INST_bypassM_deqP_rl;
  MOD_Reg<tUInt8> INST_bypassM_enqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bypassM_enqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bypassM_enqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bypassM_enqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bypassM_enqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bypassM_enqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bypassM_enqP_lat_0;
  MOD_Wire<tUInt8> INST_bypassM_enqP_lat_1;
  MOD_Reg<tUInt8> INST_bypassM_enqP_rl;
  MOD_ConfigReg<tUInt32> INST_rfile_0;
  MOD_ConfigReg<tUInt32> INST_rfile_1;
  MOD_ConfigReg<tUInt32> INST_rfile_2;
  MOD_ConfigReg<tUInt32> INST_rfile_3;
  MOD_ConfigReg<tUInt32> INST_rfile_4;
  MOD_ConfigReg<tUInt32> INST_rfile_5;
  MOD_ConfigReg<tUInt32> INST_rfile_6;
  MOD_ConfigReg<tUInt32> INST_rfile_7;
 
 /* Constructor */
 public:
  MOD_mkRFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_upd__h8234;
  tUInt8 DEF_upd__h10551;
  tUInt8 DEF_upd__h7766;
  tUInt8 DEF_upd__h10059;
  tUInt8 DEF_bypassM_deqP_dummy2_1__h8354;
  tUInt8 DEF_bypassM_deqP_dummy2_0__h8341;
  tUInt8 DEF_bypassM_enqP_dummy2_1__h8135;
  tUInt8 DEF_bypassM_enqP_dummy2_0__h10587;
  tUInt8 DEF_bypassE_deqP_dummy2_1__h7886;
  tUInt8 DEF_bypassE_deqP_dummy2_0__h7873;
  tUInt8 DEF_bypassE_enqP_dummy2_1__h7667;
  tUInt8 DEF_bypassE_enqP_dummy2_0__h10095;
  tUInt8 DEF_n__read__h10550;
  tUInt8 DEF_n__read__h10058;
  tUInt8 DEF_y__h8387;
  tUInt8 DEF_y__h7919;
 
 /* Local definitions */
 private:
  tUInt64 DEF_ab__h5222;
  tUInt64 DEF_ab__h5218;
  tUInt64 DEF_ab__h1798;
  tUInt64 DEF_ab__h1794;
  tUInt32 DEF__read__h594;
  tUInt32 DEF__read__h556;
  tUInt32 DEF__read__h518;
  tUInt32 DEF__read__h480;
  tUInt32 DEF__read__h442;
  tUInt32 DEF__read__h404;
  tUInt32 DEF__read__h366;
  tUInt32 DEF__read__h328;
  tUInt8 DEF_upd__h8167;
  tUInt8 DEF_upd__h7699;
  tUInt8 DEF_bypassM_data_0_lat_0_whas____d24;
  tUInt8 DEF_bypassE_data_0_lat_0_whas____d3;
  tUInt8 DEF_IF_bypassM_enqP_lat_0_whas__1_THEN_bypassM_enq_ETC___d34;
  tUInt8 DEF_IF_bypassE_enqP_lat_0_whas__0_THEN_bypassE_enq_ETC___d13;
 
 /* Rules */
 public:
  void RL_bypassE_data_0_canon();
  void RL_bypassE_enqP_canon();
  void RL_bypassE_deqP_canon();
  void RL_bypassM_data_0_canon();
  void RL_bypassM_enqP_canon();
  void RL_bypassM_deqP_canon();
  void RL_update();
 
 /* Methods */
 public:
  void METH_wrE(tUInt8 ARG_wrE_rindx, tUInt32 ARG_wrE_data);
  tUInt8 METH_RDY_wrE();
  void METH_wrM(tUInt8 ARG_wrM_rindx, tUInt32 ARG_wrM_data);
  tUInt8 METH_RDY_wrM();
  tUInt32 METH_rdA(tUInt8 ARG_rdA_rindx);
  tUInt8 METH_RDY_rdA();
  tUInt32 METH_rdB(tUInt8 ARG_rdB_rindx);
  tUInt8 METH_RDY_rdB();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRFile &backing);
};

#endif /* ifndef __mkRFile_h__ */
