/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Tue Mar 28 21:02:07 KST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbRightArithmeticPipelined.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbRightArithmeticPipelined::MODEL_mkTbRightArithmeticPipelined()
{
  mkTbRightArithmeticPipelined_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbRightArithmeticPipelined()
{
  MODEL_mkTbRightArithmeticPipelined *model = new MODEL_mkTbRightArithmeticPipelined();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbRightArithmeticPipelined &INST_top = *((MOD_mkTbRightArithmeticPipelined *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_bsrap_bsrp_shift;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_bsrap_bsrp_shift;
	 tUInt8 DEF_INST_top_DEF_randomVal_init__h15652;
	 tUInt8 DEF_INST_top_DEF_randomShift_init__h15783;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal_initialize;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal_initialize;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_randomShift_initialize;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_randomShift_initialize;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_request;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_request;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_response;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_response;
	 INST_top.DEF_bsrap_bsrp_reg16___d5 = INST_top.INST_bsrap_bsrp_reg16.METH_read();
	 INST_top.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_top.INST_bsrap_bsrp_inFifo.METH_notEmpty();
	 INST_top.DEF_bsrap_bsrp_reg16_BIT_32___d6 = (tUInt8)((INST_top.DEF_bsrap_bsrp_reg16___d5) >> 32u);
	 DEF_INST_top_DEF_CAN_FIRE_RL_bsrap_bsrp_shift = (!(INST_top.DEF_bsrap_bsrp_inFifo_notEmpty____d1) || INST_top.INST_bsrap_bsrp_inFifo.METH_i_notEmpty()) && (!(INST_top.DEF_bsrap_bsrp_reg16_BIT_32___d6) || INST_top.INST_bsrap_bsrp_outFifo.METH_i_notFull());
	 DEF_INST_top_DEF_WILL_FIRE_RL_bsrap_bsrp_shift = DEF_INST_top_DEF_CAN_FIRE_RL_bsrap_bsrp_shift;
	 DEF_INST_top_DEF_randomShift_init__h15783 = INST_top.INST_randomShift_init.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_randomShift_initialize = !DEF_INST_top_DEF_randomShift_init__h15783;
	 DEF_INST_top_DEF_WILL_FIRE_RL_randomShift_initialize = DEF_INST_top_DEF_CAN_FIRE_RL_randomShift_initialize;
	 DEF_INST_top_DEF_randomVal_init__h15652 = INST_top.INST_randomVal_init.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal_initialize = !DEF_INST_top_DEF_randomVal_init__h15652;
	 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal_initialize = DEF_INST_top_DEF_CAN_FIRE_RL_randomVal_initialize;
	 INST_top.DEF_x__h16497 = INST_top.INST_input_cycle.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_request = (DEF_INST_top_DEF_randomVal_init__h15652 && (DEF_INST_top_DEF_randomShift_init__h15783 && (INST_top.INST_valFifo.METH_i_notFull() && INST_top.INST_bsrap_bsrp_inFifo.METH_i_notFull()))) && (INST_top.DEF_x__h16497) < 128u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_request = DEF_INST_top_DEF_CAN_FIRE_RL_test_request;
	 INST_top.DEF_x__h16796 = INST_top.INST_output_cycle.METH_read();
	 INST_top.DEF_output_cycle_039_EQ_128___d1040 = (INST_top.DEF_x__h16796) == 128u;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_response = INST_top.DEF_output_cycle_039_EQ_128___d1040 || (INST_top.INST_bsrap_bsrp_outFifo.METH_i_notEmpty() && INST_top.INST_valFifo.METH_i_notEmpty());
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_response = DEF_INST_top_DEF_CAN_FIRE_RL_test_response;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_bsrap_bsrp_shift)
	   INST_top.RL_bsrap_bsrp_shift();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_response)
	   INST_top.RL_test_response();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_randomVal_initialize)
	   INST_top.RL_randomVal_initialize();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_randomShift_initialize)
	   INST_top.RL_randomShift_initialize();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_request)
	   INST_top.RL_test_request();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_bsrap_bsrp_inFifo.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_outFifo.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_reg16.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_reg8.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_reg4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_reg2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_shamt16.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_shamt8.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_shamt4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_shamt2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_val16.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_val8.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_val4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bsrap_bsrp_val2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_input_cycle.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_output_cycle.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_randomVal_init.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_randomShift_init.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_valFifo.rst_tick_clk((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbRightArithmeticPipelined::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbRightArithmeticPipelined_instance = new MOD_mkTbRightArithmeticPipelined(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbRightArithmeticPipelined_instance->INST_bsrap_bsrp_inFifo.set_clk_0)("CLK");
  (mkTbRightArithmeticPipelined_instance->INST_bsrap_bsrp_outFifo.set_clk_0)("CLK");
  (mkTbRightArithmeticPipelined_instance->INST_valFifo.set_clk_0)("CLK");
  (mkTbRightArithmeticPipelined_instance->set_clk_0)("CLK");
}
void MODEL_mkTbRightArithmeticPipelined::destroy_model()
{
  delete mkTbRightArithmeticPipelined_instance;
  mkTbRightArithmeticPipelined_instance = NULL;
}
void MODEL_mkTbRightArithmeticPipelined::reset_model(bool asserted)
{
  (mkTbRightArithmeticPipelined_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbRightArithmeticPipelined::get_instance()
{
  return mkTbRightArithmeticPipelined_instance;
}

/* Fill in version numbers */
void MODEL_mkTbRightArithmeticPipelined::get_version(unsigned int *year,
						     unsigned int *month,
						     char const **annotation,
						     char const **build)
{
  *year = 2014u;
  *month = 7u;
  *annotation = "A";
  *build = "34078";
}

/* Get the model creation time */
time_t MODEL_mkTbRightArithmeticPipelined::get_creation_time()
{
  
  /* Tue Mar 28 12:02:07 UTC 2017 */
  return 1490702527llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTbRightArithmeticPipelined::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTbRightArithmeticPipelined::dump_state()
{
  (mkTbRightArithmeticPipelined_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbRightArithmeticPipelined & mkTbRightArithmeticPipelined_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbRightArithmeticPipelined *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbRightArithmeticPipelined(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbRightArithmeticPipelined::dump_VCD_defs()
{
  (mkTbRightArithmeticPipelined_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt)
{
  (mkTbRightArithmeticPipelined_instance->dump_VCD)(dt,
						    vcd_depth(sim_hdl),
						    mkTbRightArithmeticPipelined_backing(sim_hdl));
}
